name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [debug, release]

    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: SurgeX_DB
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        options: --health-cmd "mysqladmin ping -hlocalhost --silent" --health-interval 10s --health-timeout 30s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y cmake g++

    - name: Check MySQL container logs
      run: sudo docker logs $(sudo docker ps -q --filter ancestor=mysql:5.7)

    - name: Set up MySQL
      env:
        MYSQL_ROOT_PASSWORD: root
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..120}; do
          if mysqladmin ping -hlocalhost -uroot -p$MYSQL_ROOT_PASSWORD --silent; then
            echo "MySQL is ready."
            break
          else
            echo "MySQL not ready yet. Waiting..."
            sleep 10
          fi
        done

        # Check if MySQL is accessible
        if mysql -hlocalhost -uroot -p$MYSQL_ROOT_PASSWORD -e "status"; then
          echo "MySQL is accessible."
        else
          echo "MySQL is not accessible."
          exit 1
        fi

        # Create database and table
        mysql -hlocalhost -uroot -p$MYSQL_ROOT_PASSWORD -e 'CREATE DATABASE IF NOT EXISTS SurgeX_DB;
                                                           USE SurgeX_DB;
                                                           CREATE TABLE IF NOT EXISTS user (
                                                             username CHAR(50) NULL,
                                                             passwd CHAR(50) NULL
                                                           ) ENGINE=InnoDB;'
      
    - name: Build project
      env:
        BUILD_TYPE: ${{ matrix.build_type }}
      run: ./build.sh
